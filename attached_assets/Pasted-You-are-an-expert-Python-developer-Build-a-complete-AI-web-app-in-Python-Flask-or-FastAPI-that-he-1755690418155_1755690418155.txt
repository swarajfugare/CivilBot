You are an expert Python developer. Build a complete AI web app in Python (Flask or FastAPI) that helps civil engineers with design, estimation, and site safety. The app should use OpenAI API (chat/completion models) for smart AI assistance.

### App Name
CivilAI Assistant

### Tech Stack
- Python (Flask or FastAPI)
- OpenAI API for AI responses
- HTML/CSS/Bootstrap for frontend UI
- SQLite (optional) for saving projects
- Replit environment (should run directly with "python main.py")

### Core Features
1. **AI Chat Assistant**
   - A chat window where engineers ask civil engineering queries.
   - Example: "What is the reinforcement for a 4m span slab?" or "Which IS code applies for footing design?"
   - The AI answers using structural, material, and project management knowledge.

2. **Structural Calculator**
   - Input: beam span, load, material strength.
   - Output: suggested beam/column/slab sizes, reinforcement requirements, concrete volume.

3. **Material Estimation (BOQ Generator)**
   - Input: room dimensions (length, width, height).
   - Output: quantities of cement, sand, aggregate, steel, and cost estimate.
   - Allow users to select unit cost (₹/kg or $/ton).

4. **Project Scheduler**
   - Input: tasks + duration.
   - Output: simple Gantt chart (text-based or matplotlib chart).
   - AI predicts delays and suggests optimization.

5. **Image Upload (Site Safety & Crack Detection - placeholder)**
   - User uploads an image.
   - For now, simulate AI response: “Detected cracks on wall” or “All workers wearing helmets.”
   - Future: integrate computer vision model.

### Pages
- Home: Introduction + features.
- Chat: Ask CivilAI anything.
- Calculator: Structural design calculator.
- Estimation: BOQ generator.
- Scheduler: Task planning.
- Safety: Upload image and AI gives result.
- About: Info about CivilAI.

### Requirements
- Use `flask` for backend.
- Use `openai` for AI calls.
- Keep code modular (separate routes for each feature).
- Add comments for beginners.
- The app must run fully inside Replit with one click.
- Provide a `requirements.txt` with dependencies.

### Bonus
- Add error handling if API key is missing.
- Make UI clean with Bootstrap (navbar + cards + forms).
- Save past queries in session.

Deliver complete runnable code (main.py + templates + requirements.txt).
